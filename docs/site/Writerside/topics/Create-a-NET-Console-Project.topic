<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       id="Create-a-NET-Console-Project" title="Create a .NET Console Project">

    <title>Create a .NET Console Project</title>

    <chapter id="Overview" title="Overview">
        <p>Creating a .NET console project is a foundational step for many developers working in the .NET ecosystem. This documentation outlines how to use the MasterCommander's <code>InitializeConsoleProjectAsync</code> method to streamline this process.</p>
    </chapter>

    <chapter id="Prerequisites" title="Prerequisites">
        <p>Before you begin, ensure you have the following installed:</p>
        <list type="decimal">
            <li>.NET 8 SDK or later</li>
            <li>Git command line tool</li>
            <li>Visual Studio Code or another code editor</li>
        </list>
    </chapter>

    <chapter id="Process-Description" title="Step-by-Step Process">
        <p>This method automates the creation of a new .NET console project, configures it within a solution, and prepares it for release. It simplifies several steps into a single asynchronous operation, improving developer productivity.</p>
    </chapter>

    <chapter id="Sequence-Diagram" title="Sequence Diagram">
        <p>The following sequence diagram illustrates the process executed by the <code>InitializeConsoleProjectAsync</code> method:</p>
            <code-block lang="plantuml">
                @startuml
                actor Developer
                participant "MasterCommander API" as API
                participant "Git CLI" as Git
                participant "Dotnet CLI" as Dotnet
                participant "FileSystem" as FS

                Developer -> API: Initialize Console Project Async
                API -> FS : Set Working Directory
                API -> API: Display Startup Message Async
                API -> Git: git init Async
                Git -> API: Repo Initialized
                API -> Dotnet: dotnet new gitignore Async
                API -> Dotnet: dotnet new editorconfig Async
                API -> Dotnet: dotnet new nugetconfig Async
                API -> Dotnet: dotnet new globaljson\n(SdkVersion = "8.0.101") Async
                API -> Dotnet: dotnet new sln\n(OutputName = "AppDemo") Async
                API -> Dotnet: dotnet new console\n(OutputName = "AppDemo.Console", OutputDirectory = "AppDemoConsoleDir") Async
                API -> Dotnet: dotnet sln add "AppDemo.Console.csproj" Async
                API -> Git: git add "*" Async
                API -> Git: git commit "Initial commit" Async
                API -> Dotnet: dotnet build Async
                API -> Dotnet: dotnet build\n(Configuration = "Release") Async
                API -> Dotnet: dotnet run\n(Project = "AppDemo.Console.csproj", Configuration = "Release") Async
                API -> FS: Compress Solution Directory Async

                note right of API: Asynchronous operations are denoted\nby "Async" for clarity.
                note right of API: Compression step matches the C# method's action.
                @enduml
            </code-block>
        <p>This diagram provides a visual representation of the interactions between the developer, MasterCommander API, and other components during project initialization.</p>
    </chapter>

    <chapter id="Example-Implementation" title="Example Implementation">
        <p>The following C# code snippet shows a practical implementation of the <code>InitializeConsoleProjectAsync</code> method:</p>
        <code-block lang="c#">
            public async Task InitializeConsoleProjectAsync()
            {
                SetWorkingDirectory();
    
                console.WriteStartupMessage();
    
                await git.InitAsync();
    
                await dotnet.NewAsync(new DotnetNewGitignoreOptions());
                await dotnet.NewAsync(new DotnetNewEditorConfigOptions());
                await dotnet.NewAsync(new DotnetNewNuGetConfigOptions());
                await dotnet.NewAsync(new DotnetNewGlobalJsonOptions { SdkVersion = SdkVersion });
                await dotnet.NewAsync(new DotnetNewSolutionOptions { OutputName = SolutionName });
                await dotnet.NewAsync(new DotnetNewConsoleOptions { OutputName = ConsoleProjectName, OutputDirectory = ConsoleProjectDirectory });
                await dotnet.SlnAddAsync(ConsoleCsproj);
    
                await git.AddAsync("*");
                await git.CommitAsync("Initial commit");
    
                await dotnet.BuildAsync();
                await dotnet.BuildAsync(new DotnetBuildOptions { Configuration = "Release" });
                await dotnet.RunAsync(new DotnetRunOptions { Project = ConsoleCsproj, Configuration = "Release" });
    
                CompressSolutionDirectory();
            }
        </code-block>
    </chapter>

    <chapter id="Conclusion-and-Next-Steps" title="Conclusion and Next Steps">
        <p>By following the steps outlined in this documentation, you have successfully created a .NET console project using an efficient and streamlined process. Explore further by adding more features to your console application or integrating it with other services.</p>
    </chapter>

</topic>
